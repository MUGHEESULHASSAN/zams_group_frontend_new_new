"use client";

import { useState } from "react";
import { useNavigate } from "react-router-dom";
import "./CreateBankCashPaymentVoucher.css";

const CreateBankCashPaymentVoucher = () => {
  const navigate = useNavigate();

  const [formData, setFormData] = useState({
    transactionNumber: "BCPV-001", // autogenerated example
    transactionDate: "",
    account: "",
    paymentType: "",
    shippingNumber: "",
    status: "Draft",
    subsidiary: "",
    location: "",
    referenceNo: "",
    department: "",
    project: "",
    memo: "",
    attachments: [],
    expenseLines: [
      {
        entity: "",
        account: "",
        expenseAmount: 0,
        memo: "",
        costCategory: "",
        whtItem: "",
        whtAmount: 0,
      },
    ],
    totalAmount: 0,
    taxAmount: 0,
    grossAmount: 0,
  });

  // Handle input changes
  const handleChange = (e) => {
    const { name, value, type, files } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: type === "file" ? files : value,
    }));
  };

  // Handle expense line change
  const handleLineChange = (index, field, value) => {
    const updated = [...formData.expenseLines];
    updated[index][field] =
      field === "expenseAmount" || field === "whtAmount"
        ? Number(value)
        : value;
    setFormData((prev) => ({
      ...prev,
      expenseLines: updated,
    }));
    recalcTotals(updated);
  };

  // Add expense line
  const addLine = () => {
    setFormData((prev) => ({
      ...prev,
      expenseLines: [
        ...prev.expenseLines,
        {
          entity: "",
          account: "",
          expenseAmount: 0,
          memo: "",
          costCategory: "",
          whtItem: "",
          whtAmount: 0,
        },
      ],
    }));
  };

  // Recalculate totals
  const recalcTotals = (lines) => {
    const total = lines.reduce((sum, l) => sum + (l.expenseAmount || 0), 0);
    const tax = total * 0.1; // example 10% tax
    setFormData((prev) => ({
      ...prev,
      totalAmount: total,
      taxAmount: tax,
      grossAmount: total + tax,
    }));
  };

  // Submit
  const handleSubmit = (e) => {
    e.preventDefault();
    console.log("Saving Voucher:", formData);
    navigate("/bank-cash-payment-vouchers");
  };

  return (
    <div className="voucher-form-page">
      <button className="back-btn" onClick={() => navigate("/bank-cash-payment-voucher")}>
        ‚Üê Back
      </button>

      <h2>Create Bank / Cash Payment Voucher</h2>

      {/* Transaction Info */}
      <form onSubmit={handleSubmit}>
        <div className="form-section">
          <label>
            Transaction Number
            <input type="text" value={formData.transactionNumber} disabled />
          </label>

          <label>
            Transaction Date <span className="required">*</span>
            <input
              type="date"
              name="transactionDate"
              value={formData.transactionDate}
              onChange={handleChange}
              required
            />
          </label>

          <label>
            Account <span className="required">*</span>
            <input
              type="text"
              name="account"
              value={formData.account}
              onChange={handleChange}
              required
            />
          </label>

          <label>
            Payment Type <span className="required">*</span>
            <select
              name="paymentType"
              value={formData.paymentType}
              onChange={handleChange}
              required
            >
              <option value="">Select</option>
              <option value="Bank">Bank</option>
              <option value="Cash">Cash</option>
            </select>
          </label>

          <label>
            Shipping Number
            <input
              type="text"
              name="shippingNumber"
              value={formData.shippingNumber}
              onChange={handleChange}
            />
          </label>

          <label>
            Status <span className="required">*</span>
            <select
              name="status"
              value={formData.status}
              onChange={handleChange}
              required
            >
              <option value="Draft">Draft</option>
              <option value="Approved">Approved</option>
              <option value="Closed">Closed</option>
            </select>
          </label>

          <label>
            Subsidiary <span className="required">*</span>
            <input
              type="text"
              name="subsidiary"
              value={formData.subsidiary}
              onChange={handleChange}
              required
            />
          </label>

          <label>
            Location
            <input
              type="text"
              name="location"
              value={formData.location}
              onChange={handleChange}
            />
          </label>

          <label>
            Reference No
            <input
              type="text"
              name="referenceNo"
              value={formData.referenceNo}
              onChange={handleChange}
            />
          </label>

          <label>
            Department
            <input
              type="text"
              name="department"
              value={formData.department}
              onChange={handleChange}
            />
          </label>

          <label>
            Project
            <input
              type="text"
              name="project"
              value={formData.project}
              onChange={handleChange}
            />
          </label>

          <label>
            Memo
            <textarea
              name="memo"
              value={formData.memo}
              onChange={handleChange}
            />
          </label>

          <label>
            Attachments
            <input
              type="file"
              multiple
              onChange={handleChange}
              name="attachments"
            />
          </label>
        </div>

        {/* Expense Lines */}
        <div className="expense-lines">
          <h3>Expense Lines</h3>
          <table className="expense-table">
            <thead>
              <tr>
                <th>Entity</th>
                <th>Account</th>
                <th>Expense Amount</th>
                <th>Memo</th>
                <th>Cost Category</th>
                <th>WHT Item</th>
                <th>WHT Amount</th>
              </tr>
            </thead>
            <tbody>
              {formData.expenseLines.map((line, index) => (
                <tr key={index}>
                  <td>
                    <input
                      type="text"
                      value={line.entity}
                      onChange={(e) =>
                        handleLineChange(index, "entity", e.target.value)
                      }
                    />
                  </td>
                  <td>
                    <input
                      type="text"
                      value={line.account}
                      onChange={(e) =>
                        handleLineChange(index, "account", e.target.value)
                      }
                    />
                  </td>
                  <td>
                    <input
                      type="number"
                      value={line.expenseAmount}
                      onChange={(e) =>
                        handleLineChange(index, "expenseAmount", e.target.value)
                      }
                    />
                  </td>
                  <td>
                    <input
                      type="text"
                      value={line.memo}
                      onChange={(e) =>
                        handleLineChange(index, "memo", e.target.value)
                      }
                    />
                  </td>
                  <td>
                    <input
                      type="text"
                      value={line.costCategory}
                      onChange={(e) =>
                        handleLineChange(index, "costCategory", e.target.value)
                      }
                    />
                  </td>
                  <td>
                    <input
                      type="text"
                      value={line.whtItem}
                      onChange={(e) =>
                        handleLineChange(index, "whtItem", e.target.value)
                      }
                    />
                  </td>
                  <td>
                    <input
                      type="number"
                      value={line.whtAmount}
                      onChange={(e) =>
                        handleLineChange(index, "whtAmount", e.target.value)
                      }
                    />
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
          <button
            type="button"
            className="add-line-btn"
            onClick={addLine}
          >
            + Add Line
          </button>
        </div>

        {/* Summary */}
        <div className="summary">
          <h3>Summary</h3>
          <div className="summary-item">
            <span>Total Amount:</span>
            <span>{formData.totalAmount}</span>
          </div>
          <div className="summary-item">
            <span>Tax Amount:</span>
            <span>{formData.taxAmount}</span>
          </div>
          <div className="summary-item">
            <span>Gross Amount:</span>
            <span>{formData.grossAmount}</span>
          </div>
        </div>

        {/* Actions */}
        <div className="form-actions">
          <button
            type="button"
            className="cancel-btn"
            onClick={() => navigate("/bank-cash-payment-voucher")}
          >
            Cancel
          </button>
          <button type="submit" className="save-btn">
            Save
          </button>
        </div>
      </form>
    </div>
  );
};

export default CreateBankCashPaymentVoucher;
